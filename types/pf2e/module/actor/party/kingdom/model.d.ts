import { FeatGroup } from "types/pf2e/module/actor/character/feats.ts"
import { RawModifier } from "types/pf2e/module/actor/modifiers.ts"
import { ItemType } from "types/pf2e/module/item/data/index.ts"
import { Statistic } from "types/pf2e/module/system/statistic/index.ts"
import type { PartyPF2e } from "../document.ts"
import { PartyCampaign } from "../types.ts"
import {
  KingdomCHG,
  KingdomGovernment,
  KingdomNationType,
  KingdomSchema,
  KingdomSkill,
  KingdomSource,
} from "./types.ts"
import { CampaignFeaturePF2e } from "types/pf2e/module/item/index.ts"
declare const DataModel: typeof import("../../../../../types/foundry/common/abstract/data.js").default
/** Model for the Kingmaker campaign data type, which represents a Kingdom */
declare class Kingdom extends DataModel<PartyPF2e, KingdomSchema> implements PartyCampaign {
  nationType: KingdomNationType
  feats: FeatGroup<PartyPF2e, CampaignFeaturePF2e>
  bonusFeats: FeatGroup<PartyPF2e, CampaignFeaturePF2e>
  skills: Record<KingdomSkill, Statistic>
  control: Statistic
  static defineSchema(): KingdomSchema
  get actor(): PartyPF2e
  get extraItemTypes(): ItemType[]
  get activities(): CampaignFeaturePF2e[]
  get charter(): KingdomCHG | null
  get heartland(): KingdomCHG | null
  get government(): KingdomGovernment | null
  _initialize(options?: Record<string, unknown>): void
  /** Creates sidebar buttons to inject into the chat message sidebar */
  createSidebarButtons(): HTMLElement[]
  collect(): Promise<void>
  /**
   * Adds a custom modifier that will be included when determining the final value of a stat. The slug generated by
   * the name parameter must be unique for the custom modifiers for the specified stat, or it will be ignored.
   */
  addCustomModifier(stat: string, data: RawModifier): Promise<void>
  /** Removes a custom modifier by slug */
  removeCustomModifier(stat: string, slug: string): Promise<void>
  update(data: DeepPartial<KingdomSource> & Record<string, unknown>): Promise<void>
  private prepareAbilityScores
  private prepareData
  private prepareFeats
  getRollData(): Record<string, unknown>
  importActivities({ skipDialog }?: { skipDialog?: boolean }): Promise<void>
  getStatistic(slug: string): Statistic | null
}
interface Kingdom extends ModelPropsFromSchema<KingdomSchema> {}
export { Kingdom }
